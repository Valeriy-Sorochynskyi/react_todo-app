{"version":3,"sources":["components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["Todo","state","currentValue","isEditing","startEdit","setState","props","text","handleChange","event","target","value","handleKeyPress","id","key","onTextChanged","this","done","toggleItem","onDelete","onDoubleClick","className","cx","completed","editing","type","checked","onChange","htmlFor","onClick","onKeyPress","React","Component","TodoList","todos","map","todo","App","newItemText","checkedAll","sortBy","checkAll","handleDelete","filter","current","handleAddItem","preventDefault","addItem","changeText","todosFilter","handleOnAll","handleOnActive","handleOnCompleted","clearCompleted","newItem","uuid","activeTodos","filteredTodos","onSubmit","placeholder","length","href","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4fe244c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\n\nexport class Todo extends React.Component {\n  state = {\n    currentValue: '',\n    isEditing: false,\n  }\n\n  startEdit = () => {\n    this.setState({\n      isEditing: true,\n      currentValue: this.props.text,\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      currentValue: event.target.value,\n    });\n  }\n\n  handleKeyPress = (event, id) => {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    this.props.onTextChanged(id, this.state.currentValue);\n\n    this.setState({\n      currentValue: '',\n      isEditing: false,\n    });\n  }\n\n  render() {\n    const { isEditing, currentValue } = this.state;\n    const { id, done, text, toggleItem, onDelete } = this.props;\n\n    return (\n      <li\n        onDoubleClick={this.startEdit}\n        className={cx({\n          completed: done,\n          editing: isEditing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${id}`}\n            checked={done}\n            onChange={() => toggleItem(id)}\n          />\n          <label htmlFor={`todo-${id}`}>{text}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onDelete(id)}\n          />\n        </div>\n        {isEditing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={currentValue}\n            onChange={this.handleChange}\n            onKeyPress={event => this.handleKeyPress(event, id)}\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  id: PropTypes.string.isRequired,\n  done: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n  toggleItem: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onTextChanged: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { arrayOf } from 'prop-types';\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    toggleItem,\n    onDelete,\n    onTextChanged,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <Todo\n          key={todo.id}\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n          toggleItem={toggleItem}\n          onDelete={onDelete}\n          onTextChanged={onTextChanged}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    done: PropTypes.bool,\n    text: PropTypes.string,\n  })).isRequired,\n  toggleItem: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onTextChanged: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport uuid from 'react-uuid';\nimport { TodoList } from './components/TodoList/TodoList';\n\nclass App extends React.Component {\n  state = {\n    todos: [\n      {\n        done: false, id: '1', text: 'do exercise',\n      },\n      {\n        done: true, id: '2', text: 'buy milk',\n      },\n    ],\n    newItemText: '',\n    checkedAll: false,\n    sortBy: '',\n  }\n\n  checkAll = ({ target }) => {\n    this.setState(({ todos, checkedAll }) => {\n      const newTodos = todos.map(todo => ({\n        ...todo,\n        done: target.checked,\n      }));\n\n      return {\n        todos: newTodos,\n        checkedAll: !checkedAll,\n      };\n    });\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      newItemText: target.value,\n    });\n  }\n\n  handleDelete = (id) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(current => current.id !== id),\n    }));\n  };\n\n  toggleItem = (id) => {\n    this.setState(({ todos }) => {\n      const newTodos = todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            done: !todo.done,\n          };\n        }\n\n        return todo;\n      });\n\n      return {\n        todos: newTodos,\n      };\n    });\n  }\n\n  handleAddItem = (event) => {\n    event.preventDefault();\n    this.addItem(this.state.newItemText);\n  }\n\n  changeText = (id, text) => {\n    this.setState(({ todos }) => {\n      const newItems = todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            text,\n          };\n        }\n\n        return todo;\n      });\n\n      return {\n        todos: newItems,\n      };\n    });\n  };\n\n  todosFilter = (todos, sortBy) => {\n    switch (sortBy) {\n      case 'all':\n        return todos;\n      case 'done':\n        return todos.filter(todo => todo.done);\n      case 'active':\n        return todos.filter(todo => !todo.done);\n      default:\n        return todos;\n    }\n  };\n\n  handleOnAll = () => {\n    this.setState({ sortBy: 'All' });\n  };\n\n  handleOnActive = () => {\n    this.setState({ sortBy: 'active' });\n  };\n\n  handleOnCompleted = () => {\n    this.setState({ sortBy: 'done' });\n  };\n\n  clearCompleted = () => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => !todo.done),\n      checkedAll: false,\n    }));\n  };\n\n  addItem(text) {\n    if (text === '') {\n      return;\n    }\n\n    this.setState(({ todos }) => {\n      const newItem = {\n        id: uuid(),\n        done: false,\n        text,\n      };\n\n      return {\n        todos: [...todos, newItem],\n        newItemText: '',\n      };\n    });\n  }\n\n  render() {\n    const { todos, newItemText, sortBy, checkedAll } = this.state;\n    const activeTodos = todos.filter(todo => !todo.done);\n    const filteredTodos = this.todosFilter(todos, sortBy);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.handleAddItem}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newItemText}\n              onChange={this.handleChange}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          {!!todos.length && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                checked={checkedAll}\n                className=\"toggle-all\"\n                onChange={this.checkAll}\n              />\n              <label htmlFor=\"toggle-all\">\n                  Mark all as complete\n              </label>\n            </>\n          )}\n          <TodoList\n            todos={filteredTodos}\n            onDelete={this.handleDelete}\n            toggleItem={this.toggleItem}\n            onTextChanged={this.changeText}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos.length} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                onClick={this.handleOnAll}\n                href=\"#/\"\n                className=\"selected\"\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                onClick={this.handleOnActive}\n                href=\"#/active\"\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                onClick={this.handleOnCompleted}\n                href=\"#/completed\"\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n          {todos.some(todo => todo.done === true)\n            && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}